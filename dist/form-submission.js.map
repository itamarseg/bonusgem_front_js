{
  "version": 3,
  "sources": ["../form-submission.js"],
  "sourcesContent": ["window.Webflow?.push(async () => {\n  try {\n    let errorDiv;\n    let successDiv;\n\n    console.log(\"Submission Flow\");\n\n    // 1. Remove w-form to prevent Webflow from handling it\n    const emailForm = document.getElementById(\"email-form\");\n\n    if (emailForm && emailForm.parentElement) {\n      emailForm.parentElement.classList.remove(\"w-form\");\n\n      // MutationObserver to watch for class changes\n      const observer = new MutationObserver(function (mutations) {\n        mutations.forEach(function (mutation) {\n          if (mutation.attributeName === \"class\") {\n            emailForm.parentElement.classList.remove(\"w-form\");\n          }\n        });\n      });\n\n      // Configuration of the observer\n      observer.observe(emailForm.parentElement, {\n        attributes: true, // Configure it to listen to attribute changes\n      });\n\n      // Find select elements\n      nameElement = document.getElementById(\"name\");\n      emailElement = document.getElementById(\"email\");\n      dateElement = document.getElementById(\"Date\");\n\n      nameElement.style.appearance = \"none\";\n      nameElement.style.borderRadius = 0;\n      emailElement.style.appearance = \"none\";\n      emailElement.style.borderRadius = 0;\n      dateElement.style.appearance = \"none\";\n      dateElement.style.borderRadius = 0;\n\n      // 2. Find the error and success divs\n      errorDiv = emailForm.parentElement.querySelector(\n        '[data-name-form=\"error\"]'\n      );\n\n      successDiv = emailForm.parentElement.querySelector(\n        '[data-name-form=\"success\"]'\n      );\n\n      errorDiv.style.display = \"none\";\n      successDiv.style.display = \"none\";\n\n      // Google Sign-In button\n      google.accounts.id.initialize({\n        client_id:\n          \"597521131034-6amd34ifc637c39bhu2dvclns4aptnna.apps.googleusercontent.com\",\n        callback: handleGoogleCredentialResponse,\n      });\n      google.accounts.id.renderButton(\n        document.getElementById(\"google-signin-button\"),\n        {\n          theme: \"outline\",\n          size: \"large\",\n          // width: \"auto\",\n          logo_alignment: \"center\",\n          // type: 'icon'\n        }\n      );\n\n      // Handle Google Sign-In response\n      async function handleGoogleCredentialResponse(response) {\n        const data = jwt_decode(response.credential);\n        const userEmail = data.email;\n        const fullName = data.name;\n\n        // Automatically fill in the email field with the user's Google email\n        if (emailElement) {\n          console.log(userEmail, fullName);\n          emailElement.value = userEmail;\n        }\n\n        // Automatically fill in the name field with the user's Google full name\n        if (nameElement) {\n          nameElement.value = fullName;\n        }\n\n        // Optionally submit the form automatically after Google Sign-In\n        // emailForm.dispatchEvent(new Event(\"submit\"));\n      }\n\n      // 3. Add our own submit handler\n      emailForm.onsubmit = async (event) => {\n        try {\n          event.preventDefault();\n\n          // 4. Get the IP address\n          let ip;\n          try {\n            const response = await fetch(\"https://api.ipify.org?format=json\");\n            const json = await response.json();\n            ip = json.ip;\n          } catch (err) {\n            console.error(`Error getting IP Address: ${err}`);\n          }\n\n          const userAgent = navigator.userAgent;\n\n          const queryString = window.location.search;\n          const urlParams = new URLSearchParams(queryString);\n\n          const tid = urlParams.get(\"cid\");\n          const aff = urlParams.get(\"aff\") || \"\";\n          const s1 = urlParams.get(\"s1\") || \"\";\n          const s2 = urlParams.get(\"s2\") || \"\";\n          const s3 = urlParams.get(\"s3\") || \"\";\n          const s4 = urlParams.get(\"s4\") || \"\";\n\n          const formData = new FormData(emailForm);\n\n          // 5. Get the form entries as an object\n          const formObj = Object.fromEntries(formData.entries());\n\n          const data = {\n            full_name: formObj.name,\n            email: formObj.email,\n            birth_day: formObj.Date,\n            affiliate: aff,\n            transaction_id: tid,\n            s1: s1,\n            s2: s2,\n            s3: s3,\n            s4: s4,\n            ip_address: ip,\n            user_agent: userAgent,\n          };\n          console.log(\"data to send to server:\", data);\n          // 6. Send the data to the server \n          // https://bonusgem-api-afvof.ondigitalocean.app/v1/submission\n          //http://127.0.0.1:8000/v1/submission\n          const response = await fetch(\n            \"https://lobster-app-y7aqm.ondigitalocean.app/v1/submission\",\n            {\n              method: \"POST\",\n              body: JSON.stringify(data),\n              headers: {\n                \"Content-Type\": \"application/json\",\n              },\n            }\n          );\n          const responseData = await response.json();\n\n          if (response.status !== 200) {\n            if (responseData.detail === \"Email is invalid\") {\n              document.getElementById(\"error-text\").innerText =\n                \"Oops! Something went wrong, your email is invalid\";\n            }\n            throw new Error(\"Response status is not 200\");\n          }\n\n          // Hide the form and show the success message\n          emailForm.style.display = \"none\";\n          successDiv.style.display = \"block\";\n\n          // Redirect to another page after a short delay (e.g., 1/2 seconds)\n          const smartLink = \"https://www.hevuv.com/cmp/GJRHSG88/3MQKZT/?\";\n          const params = `transaction_id=${tid}&source_id=${aff}&sub1=${s1}&sub2=${s2}&sub3=${s3}&sub4=${s4}&sub5=${tid}`;\n          setTimeout(() => {\n            window.location.href = `${smartLink}${params}`;\n          }, 500);\n        } catch (e) {\n          // 8. Handle the error\n          if (e instanceof Error) {\n            errorDiv.style.display = \"block\";\n            console.error(e);\n          }\n        }\n      };\n    }\n  } catch (e) {\n    console.error(\"error\", e);\n    // errorDiv.style.display = 'block';\n  }\n});\n//# sourceMappingURL=main.js.map\n"],
  "mappings": "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",
  "names": ["errorDiv", "successDiv", "emailForm", "mutations", "mutation", "handleGoogleCredentialResponse", "response", "data", "userEmail", "fullName", "event", "ip", "err", "userAgent", "queryString", "urlParams", "tid", "aff", "s1", "s2", "s3", "s4", "formData", "formObj", "responseData", "smartLink", "params", "e"]
}
